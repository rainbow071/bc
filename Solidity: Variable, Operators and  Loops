//Variable
// SPDX-License-Identifier: MIT
pragma solidity 0.8.24;
contract variable_dem{
int256 public sign_num;
bool public isTrue;
address public wallet_address;
uint256[3] public fixarray;
string public message;
enum status {Pending, Approved}
status public currentstatus;
constructor()
{
sign_num=-45;
isTrue=true;
wallet_address=msg.sender;
fixarray=[3,10,8];
currentstatus=status.Pending;
message="K.C college";
}
function update_var() public {
sign_num=-20;
isTrue=false;
wallet_address=msg.sender;
fixarray [2]=37;
currentstatus=status.Approved;
message="K.C College MSc Part 2";
}
}


//operation
// SPDX-License-Identifier: MIT
pragma solidity 0.8.24;
contract math{
 uint256 public num1;
 uint256 public num2;
 uint256 public result;
 function setnum (uint256 _num1, uint _num2)public {
num1 = _num1;
num2 = _num2;
}
function div() public returns (uint) {
require (num2!=0, "oops that possible to divide");
result=num1/num2;
return result;
}
function add() public returns (uint){
result=num1+num2;
return result;
}
function sub() public returns (uint){
result=num1-num2;
return result;
}
function multiply()public returns (uint){
 result=num1*num2;
 return result;
}
}

(3) Loops

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract WhileLoopExample {
 uint256 public counter;
 function increment (uint256 _iterations) public {
 uint256 i = 0;
 while (i< _iterations) {
 counter++;
i++;
 }
 }
}
