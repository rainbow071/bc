1. Function

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract Function {
 uint256 public number;
 function setNumber(uint256 _newNumber) public {
 number = _newNumber;
 }
 function doubleNumber() public {
 number *= 2;
 }
}


View Function

// SPDX-License-Identifier: MIT
pragma solidity 0.8.24;
contract HashContract {
 bytes32 private message;
 function hash1(string memory _msg) public {
 message = keccak256(bytes(_msg));
 }
 function getMsg() public view returns (bytes32){
 return message;
 }
}

Pure Function

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

contract Test {
    // Function to get the result of product and sum
    function getResult() public pure returns (uint256 product, uint256 sum) {
        // Local variables
        uint256 a = 1;
        uint256 b = 2;
        
        // Calculate product and sum
        product = a * b;
        sum = a + b;
    }
}


Modifier Function

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MyContract {
    address public owner;
    uint256 public value;

    // Modifier to check if the caller is the owner of the contract
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _; // Continue executing the function
    }

    // Modifier to check if the value is greater than a certain threshold
    modifier valueGreaterThan(uint256 threshold) {
        require(value > threshold, "Value is not greater than the threshold");
        _; // Continue executing the function
    }

    // Constructor to set the owner of the contract
    constructor() {
        owner = msg.sender;
    }

    // Function that can only be called by the owner
    function setValue(uint256 _value) public onlyOwner {
        value = _value;
    }

    // Function that can only be called if the value is greater than a threshold
    function processValue() public valueGreaterThan(10) {
        // Process the value
    }
}
 
