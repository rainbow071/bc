#pip install pycryptodome

import binascii
import datetime
from Crypto import Random
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_v1_5
from Crypto.Hash import SHA1
from Crypto.Signature import PKCS1_v1_5
import collections

class Client:
    def __init__(self):
        random = Random.new().read
        self._private_key = RSA.generate(1024, random)
        self._public_key = self._private_key.publickey()
        self._signer = PKCS1_v1_5.new(self._private_key)

    @property
    def identity(self):
        return binascii.hexlify(self._public_key.exportKey(format='DER')).decode('ascii')

class Transaction:
    def __init__(self, sender, receiver, value):
        self.sender = sender
        self.receiver = receiver
        self.value = value
        self.time = datetime.datetime.now()

    def to_dict(self):
        if self.sender == "Genesis":
            identity = "Genesis"
        else:
            identity = self.sender.identity
        return collections.OrderedDict({
            "sender": identity,
            "receiver": self.receiver,
            "value": self.value,
            "time": self.time
        })

    def sign_transaction(self):
        private_key = self.sender._private_key
        signer = PKCS1_v1_5.new(private_key)
        h = SHA1.new(str(self.to_dict()).encode('utf8'))
        return binascii.hexlify(signer.sign(h)).decode('ascii')

def display_tran(transaction):
    dict = transaction.to_dict()
    print('\n Sender: Bob --> \n' + dict['sender'])
    print('\n Receiver: Jones --> \n' + dict['receiver'])
    print('\n Value --> \n' + str(dict['value']))
    print('\n Time --> \n' + str(dict['time']))

transactions = []
Bob = Client()
Jones = Client()
t1 = Transaction(Bob, Jones.identity, 15)
t1.sign_transaction()
display_tran(t1)
